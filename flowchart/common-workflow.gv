digraph commonworkflow {
    splines = ortho;
    overlap = false;

    edge [
        arrowsize = 0.8,
        fontname = "Verdana",
        fontsize = 12
    ]

    node [
        shape = rect,
        style = filled,
        fillcolor = lightyellow,
        fontname = "Verdana",
        fontsize = 12
    ]

    // dot
    dot1 [
        shape = point,
        style = invis,
        width = 0
    ]
    dot2 [
        shape = point,
        style = invis,
        width = 0
    ]

    // workflow
    common_workflow [
        shape = invhouse,
        label = <<b>Common<br/>workflow</b>>,
        group = g1
    ]
    sharing_workflow [
        shape = invhouse,
        label = <<b>Sharing<br/>workflow</b>>,
        group = g1
    ]

    // actions
    create_new_files_or_edit_existent_files [
        label = <<b>Create new or edit<br/>existent files</b>>,
        group = g1
    ]

    // decisions
    check_commit [
        shape = diamond,
        label = <<b>Check what<br/>will be<br/>commited?</b>>,
        height = 1,
        group = g1
    ]
    fine_to_commit [
        shape = diamond,
        label = <<b>Fine to<br/>commit?</b>>,
        height = 1,
        group = g1
    ]
    share_changes [
        shape = diamond,
        label = <<b>Would you<br/>like share<br/>the changes?</b>>,
        height = 1,
        group = g1
    ]

    // commands
    git_add [
        label = <
            <table border="0" cellborder="0" cellspacing="0">
            <tr><td><b>Put the changes into staging area</b></td></tr>
            <tr><td>git add .</td></tr>
            </table>
        >,
        group = g1
    ]
    git_status [
        label = <
            <table border="0" cellborder="0" cellspacing="0">
            <tr><td><b>Check the content to commit</b></td></tr>
            <tr><td>git status</td></tr>
            </table>
        >,
        group = g1
    ]
    git_restore [
        label = <
            <table border="0" cellborder="0" cellspacing="0">
            <tr><td><b>Restore from staging area</b></td></tr>
            <tr><td>git restore --staged {filename}</td></tr>
            </table>
        >
    ]
    git_commit [
        label = <
            <table border="0" cellborder="0" cellspacing="0">
            <tr><td><b>Create the commit</b></td></tr>
            <tr><td>git commit -m "message"</td></tr>
            </table>
        >,
        group = g1
    ]

    // relations
    common_workflow -> create_new_files_or_edit_existent_files
    create_new_files_or_edit_existent_files -> git_add
    create_new_files_or_edit_existent_files -> dot2 [dir = back ]
    git_add -> check_commit
    check_commit -> git_status [label = <<b>   yes</b>>]
    check_commit -> git_commit [xlabel = <<b>no   </b>>, constraint = false]
    git_status -> fine_to_commit
    fine_to_commit -> git_commit [label = <<b>   yes</b>>]
    fine_to_commit -> git_restore [xlabel = <<b>no</b>>, constraint = false]
    git_restore -> git_status
    git_commit -> share_changes
    share_changes -> sharing_workflow [label = <<b>   yes</b>>]
    share_changes -> dot1 [dir = "none"]
    dot2 -> dot1 [xlabel = <<b>   no</b>>, dir = "none"]

    // put git_restore and git_status in the same row
    { rank = same; create_new_files_or_edit_existent_files; dot2; }
    { rank = same; git_restore; git_status; }
    { rank = same; share_changes; dot1; }
}
